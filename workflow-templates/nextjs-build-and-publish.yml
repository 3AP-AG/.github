name: Build and Publish Docker image
on:
  push:
    branches: [default-branch]

concurrency:
  group: ci-build-main

env:
  NODE_VERSION: 18.17.1

jobs:
  setup-env-vars:
    # this step is necessary in order to avoid gcp auth failing
    name: Prepare environment variables
    runs-on: ubuntu-latest
    environment:
      name: dev # use the dev environment artifact registry even for prod builds
    outputs:
      GIT_SHORT_SHA: ${{ steps.short-sha-step.outputs.SHORT_SHA }}
      GCP_AUTH_SERVICE_ACCOUNT: ${{ vars.GCP_AUTH_SERVICE_ACCOUNT }}
      GCP_AUTH_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_AUTH_WORKLOAD_IDENTITY_PROVIDER }}
      GCP_ARTIFACT_REGISTRY_URL: ${{ vars.GCP_ARTIFACT_REGISTRY_URL }}
    steps:
      - id: short-sha-step
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  build-publish:
    strategy:
      matrix:
        environment: [dev, prod]
    runs-on: ubuntu-latest
    needs: setup-env-vars
    environment:
      name: ${{ matrix.environment }}
    env:
      DOCKER_BUILD_CONTEXT: ./
      DOCKERFILE_PATH: ./Dockerfile
      DOCKER_IMAGE_LABEL_TITLE: PROJECT_NAME frontend
      DOCKER_REPOSITORY: ${{ needs.setup-env-vars.outputs.GCP_ARTIFACT_REGISTRY_URL }}/superlab-${{ matrix.environment }}
    name: "NextJS frontend :: Build & Publish"
    permissions:
      contents: "read"
      id-token: "write" # Required for GCP workload identity
      packages: "write" # Required even if not publishing to GHCR

    steps:
      - name: "Checkout"
        uses: "actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11" # v4.1.1

      - name: Authenticate to GCP
        id: "gcp_auth"
        uses: google-github-actions/auth@v1
        with:
          access_token_lifetime: "900s"
          token_format: access_token # must be "access_token" if using GCR or GAR
          service_account: ${{ needs.setup-env-vars.outputs.GCP_AUTH_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ needs.setup-env-vars.outputs.GCP_AUTH_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Create .env
        # IMPORTANT: every key expected by the .env file has to be specified and loaded with the appropriate value
        run: |-
          touch .env

          # echo APP_BASE_URL=${{ vars.APP_BASE_URL }} >> .env

      - name: "Login Docker to Google Container Registry"
        uses: "docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d" # v3.0.0
        with:
          registry: ${{ needs.setup-env-vars.outputs.GCP_ARTIFACT_REGISTRY_URL }}
          username: oauth2accesstoken
          password: ${{ steps.gcp_auth.outputs.access_token }}

      - id: "docker_meta"
        name: "Fetch Docker container meta"
        uses: "docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934" # v5.0.0
        with:
          images: |-
            ${{ env.DOCKER_REPOSITORY }}
          labels: |-
            org.opencontainers.image.title=${{ env.DOCKER_IMAGE_LABEL_TITLE }}
            org.opencontainers.image.vendor=3AP
          # Docker labels can be used to add well-known metadata to an image
          # A default title will be generated by the action by using the repo name.
          # The default tile isn't very useful for monorepos, so we overwrite it (even in non-monorepos).
          tags: |-
            type=semver,pattern={{version}}
            type=edge,branch=${{ github.event.repository.default_branch }}
            type=ref,event=branch,branch=feature/**
            type=ref,event=branch,branch=bugfix/**
            type=sha,enable=true,prefix=git-sha-,format=short

      - id: "build_push"
        name: "Build and push Docker image"
        uses: "docker/build-push-action@v5"
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

  tag-for-deployment:
    name: Add git dev deployment tag
    needs: [setup-env-vars, build-publish]
    runs-on: ubuntu-latest
    env:
      SHA: ${{ needs.setup-env-vars.outputs.GIT_SHORT_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          token: ${{ secrets.CI3AP_GH_TOKEN }}
      - name: Git Tag
        run: |-
          echo "Will tag as dev-deploy to trigger deploy action"
          git tag --delete dev-deploy || echo "ignore (eventual) errors of previous command (normal on first run)"
          git push origin :refs/tags/dev-deploy || echo "ignore (eventual) errors of previous command (normal on first run)"
          git tag dev-deploy
          git push origin dev-deploy
